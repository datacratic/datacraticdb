// Generated by CoffeeScript 1.7.1
(function() {
  var Backend, askForName, backend, engine, jumpto, refresh, renderPlugins, sleep, template, _, _plugin, _providers;

  window.providers = {
    beh: {
      name: "Behaviour Storage Plugin",
      description: "Store high volume behavioral data in (who, what, when) format.",
      uri: "/plugins/beh.html",
      image: "logo.png"
    },
    pixel: {
      name: "Pixel Input Plugin",
      description: "Deploy a pixel to collect behavioral data.",
      uri: "/plugins/pixel.html",
      icon: "cloud-upload"
    },
    sql: {
      name: "SQL Query Plugin",
      description: "Query your data with SQL and make it available to your ORM or application.",
      uri: "/plugins/sql.html",
      image: "SQLMath.png"
    },
    prediction: {
      name: "Recommender Query Plugin",
      description: "Real-time query of product recommendations with a customizable machine learning based algorithm.",
      uri: "/plugins/prediction.html",
      image: "cart.jpg"
    },
    nb: {
      name: "Data Science Query Plugin",
      description: "Make your dataset available to Python based data science tools within your normal environment.",
      uri: "/plugins/nb.html",
      image: "ipython.jpg"
    },
    viz: {
      name: "Visualization Query Plugin",
      description: "Clustering and exploration of behavioral data.",
      uri: "http://opensource.datacratic.com/data-projector/",
      image: "vis.png"
    },
    mongo: {
      name: "MongoDB Storage Plugin",
      description: "Connect to an existing MongoDB database and make it available for machine learning.",
      image: "/mongo.png"
    },
    rtbkit: {
      name: "RTBkit Delivery Plugin",
      description: "Push predictions into RTBkit for personalized real-time bidding.",
      image: "/rtbkit.png"
    },
    exacttarget: {
      name: "ExactTarget Delivery Plugin",
      description: "Push predictions into ExactTarget for personalized email.",
      image: "/exacttarget.jpeg"
    },
    hadoop: {
      name: "Hadoop Storage Plugin",
      description: "Connect to an existing Hadoop system via HBase to make the data available.",
      image: "hadoop_logo.jpg"
    },
    pg: {
      name: "PostgreSQL Storage Plugin",
      description: "Connect to an existing PostgreSQL database to make the data available.",
      image: "postgres.png"
    },
    mm: {
      name: "MetaMarkets Query Plugin",
      description: "Use MetaMarkets' real-time rollup system to make pivoting and exporation available.",
      image: "metamarkets.png"
    }
  };

  Backend = (function() {
    function Backend() {
      var _base;
      if (localStorage.state != null) {
        this.state = JSON.parse(localStorage.state);
      }
      if (this.state == null) {
        this.state = this.default_state();
      }
      if ((_base = this.state).plugins == null) {
        _base.plugins = [];
      }
    }

    Backend.prototype.default_state = function() {
      return {
        plugins: []
      };
    };

    Backend.prototype.reset = function(cb) {
      this.state = this.default_state();
      this.commit();
      return cb();
    };

    Backend.prototype.post = function(url, data, cb) {
      var i;
      if (cb == null) {
        cb = function() {};
      }
      switch (url) {
        case "/plugins":
          i = this.state.plugins.push(data);
          this.state.plugins[i - 1].id = i - 1;
          this.commit();
          cb(i);
          return false;
        case "/dbname":
          this.state.dbname = data;
          this.commit();
          cb();
          return false;
      }
      return false;
    };

    Backend.prototype.get = function(url, data, cb) {
      var x;
      if (cb == null) {
        cb = function() {};
      }
      switch (url) {
        case "/plugins":
          if (data != null) {
            cb(this.state.plugins[data]);
            return false;
          }
          cb((function() {
            var _i, _len, _ref, _results;
            _ref = this.state.plugins;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              if (x != null) {
                _results.push(x);
              }
            }
            return _results;
          }).call(this));
          return false;
        case "/dbname":
          cb(this.state.dbname);
          return false;
      }
      return false;
    };

    Backend.prototype["delete"] = function(url, data, cb) {
      if (cb == null) {
        cb = function() {};
      }
      switch (url) {
        case "/plugins":
          delete this.state.plugins[data];
          this.commit();
          cb();
          return;
      }
      return false;
    };

    Backend.prototype.commit = function() {
      return localStorage.state = JSON.stringify(this.state);
    };

    return Backend;

  })();

  backend = new Backend();

  engine = new CoffeeTemplates();

  template = function(l, t) {
    return engine.render(t, l);
  };

  sleep = function(x, y) {
    return setTimeout(y, x * 1000);
  };

  _ = function() {
    return backend.get("/dbname", null, function(dbname) {
      if (dbname != null) {
        return renderPlugins(dbname);
      } else {
        return askForName();
      }
    });
  };

  askForName = function() {
    $("#contents").append(template({}, function() {
      return form(".col-md-6.col-md-offset-3.form-horizontal", {
        role: "form",
        id: "deployForm"
      }, function() {
        div(".form-group.form-group-lg", function() {
          label(".col-sm-4.control-label", {
            "for": "formGroupInputLarge"
          }, "Name Your Database:");
          return div(".col-sm-6", function() {
            return input(".form-control", {
              type: "text",
              id: "dbname"
            }, function() {});
          });
        });
        return div(".form-group", function() {
          return div(".col-sm-offset-4.col-sm-10", function() {
            return button(".btn.btn-primary.btn-lg", {
              id: "deploy",
              type: "submit"
            }, function() {
              span({
                id: "deploy_text"
              }, function() {
                return "Create";
              });
              return i({
                id: "deploy_glyph"
              }, function() {});
            });
          });
        });
      });
    }));
    return $("#deployForm").bind("submit", function() {
      $("#deploy").blur().removeClass("btn-primary").addClass("btn-warning");
      $("#deploy_glyph").css({
        "margin-left": "10px"
      }).addClass("fa fa-spinner fa-spin");
      $("#deploy_text").text("Creating...");
      sleep(0.5, function() {
        return backend.post("/dbname", $("#dbname").val(), refresh);
      });
      return false;
    });
  };

  renderPlugins = function(dbname) {
    return backend.get("/plugins", null, function(plugins) {
      $("#contents").append(template({
        dbname: dbname,
        plugins: plugins
      }, function() {
        var t, _i, _len, _ref, _results;
        h1(".text-center", "Database: " + this.dbname);
        h3("Installed Plugins");
        br();
        a(".list-group-item", {
          href: "#/providers"
        }, function() {
          span(".pull-left", {
            style: "font-size: 3.5em; width: 80px"
          }, function() {
            return i(".fa.fa-plus-square-o", function() {});
          });
          h4("Install a plugin...");
          return p("Visit our Plugin Store");
        });
        a(".list-group-item", {
          href: "#/"
        }, function() {
          div(".pull-right", {
            style: "margin: 20px;"
          }, function() {
            return p(function() {
              return "Free!";
            });
          });
          span(".pull-left", {
            style: "font-size: 3.5em; width: 80px"
          }, function() {
            return i(".fa.fa-plus-square-o", function() {});
          });
          h4("Deploy a custom plugin...");
          return p("Use your own infrastructure to host your code.");
        });
        _ref = this.plugins;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(a(".list-group-item", {
            href: "#/plugins/" + t.id
          }, function() {
            button(".close.pull-right.deleteplugin", {
              type: "button",
              "data-tid": t.id
            }, function() {
              return span({
                "aria-hidden": "true"
              }, "&times;");
            });
            div(".pull-right", {
              style: "margin: 20px;"
            }, function() {
              return p(function() {
                return "$15/month";
              });
            });
            span(".pull-left", {
              style: "font-size: 3.5em; width: 80px"
            }, function() {
              if (t.icon != null) {
                return i(".fa.fa-" + t.icon, function() {});
              } else if (t.image != null) {
                return img({
                  src: t.image,
                  width: 50,
                  height: 50
                });
              }
            });
            h4(t.name);
            return p(t.description);
          }));
        }
        return _results;
      }));
      return $(".deleteplugin").bind("click", function() {
        backend["delete"]("/plugins", $(this).data("tid"), refresh);
        return false;
      });
    });
  };

  _providers = function(_arg) {
    var ignore, plugin_id;
    ignore = _arg[0], plugin_id = _arg[1];
    backend.get("/plugins", null, function(plugins) {
      return $("#contents").append(template({
        plugins: plugins
      }, function() {
        h1(".text-center", "Plugin Store");
        br();
        br();
        return div({
          "class": "row",
          id: "tile_row"
        }, function() {
          var k, prov, _ref, _results;
          _ref = window.providers;
          _results = [];
          for (k in _ref) {
            prov = _ref[k];
            div("#myModal" + k + ".modal.fade", {
              tabindex: "-1",
              role: "dialog",
              "aria-labelledby": "myModalLabel",
              "aria-hidden": "true"
            }, function() {
              return div(".modal-dialog", function() {
                return div(".modal-content", function() {
                  div(".modal-header", function() {
                    button(".close", {
                      type: "button",
                      "data-dismiss": "modal"
                    }, function() {
                      span({
                        "aria-hidden": "true"
                      }, "&times;");
                      return span(".sr-only", "Close");
                    });
                    div(".text-center", {
                      style: "font-size: 6em"
                    }, function() {
                      if (prov.icon != null) {
                        return i(".fa.fa-" + prov.icon, function() {});
                      } else if (prov.image != null) {
                        return img({
                          src: prov.image,
                          width: 100,
                          height: 100
                        });
                      }
                    });
                    return h2("#myModalLabel.modal-title.text-center", prov.name);
                  });
                  div(".modal-body", function() {
                    p(prov.description);
                    p(".pull-right", "Cost: $15/month");
                    return br();
                  });
                  return div(".modal-footer", function() {
                    var alreadyThere, t, _i, _len, _ref1;
                    button(".btn.btn-default", {
                      type: "button",
                      "data-dismiss": "modal"
                    }, "Close");
                    if (prov.uri == null) {
                      return button(".btn.btn-primary.disabled", {
                        type: "button",
                        "data-prov": k
                      }, "Plugin coming soon!");
                    } else {
                      _ref1 = this.plugins;
                      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                        t = _ref1[_i];
                        if (t.name === prov.name) {
                          alreadyThere = true;
                        }
                      }
                      if (alreadyThere) {
                        return button(".btn.btn-primary.disabled", {
                          type: "button",
                          "data-prov": k
                        }, "Plugin already installed");
                      } else {
                        return button(".btn.btn-primary.addplugin", {
                          type: "button",
                          "data-prov": k
                        }, function() {
                          span(".btntxt", function() {
                            return "Install plugin";
                          });
                          return i(".btnglyph", function() {});
                        });
                      }
                    }
                  });
                });
              });
            });
            _results.push(div({
              "class": "col-md-3"
            }, function() {
              return div({
                "class": "panel panel-default",
                style: "height: 200px"
              }, function() {
                div({
                  "class": "panel-heading"
                }, function() {
                  return h3({
                    "class": "panel-title"
                  }, function() {
                    return prov.name;
                  });
                });
                return div({
                  "class": "panel-body text-center   "
                }, function() {
                  return span({
                    style: "font-size: 6em"
                  }, function() {
                    return a({
                      href: "",
                      "data-toggle": "modal",
                      "data-target": "#myModal" + k
                    }, function() {
                      if (prov.icon != null) {
                        return i(".fa.fa-" + prov.icon, function() {});
                      } else if (prov.image != null) {
                        return img({
                          src: prov.image,
                          width: 100,
                          height: 100
                        });
                      }
                    });
                  });
                });
              });
            }));
          }
          return _results;
        });
      }));
    });
    return $(".addplugin").bind("click", function() {
      var provId;
      $(this).blur().removeClass("btn-primary").addClass("btn-warning");
      $(this).find(".btnglyph").css({
        "margin-left": "10px"
      }).addClass("fa fa-spinner fa-spin");
      $(this).find(".btntxt").text("Installing...");
      provId = $(this).data("prov");
      sleep(0.5, function() {
        return backend.post("/plugins", providers[provId], function() {
          return jumpto("#/");
        });
      });
      return false;
    });
  };

  _plugin = function(_arg) {
    var ignore, plugin_id;
    ignore = _arg[0], plugin_id = _arg[1];
    return backend.get("/plugins", plugin_id, function(plugin) {
      return $("#contents").append(template({
        plugin: plugin
      }, function() {
        return div({
          "class": "panel panel-default",
          style: "width:100%; height:100%;"
        }, function() {
          div({
            "class": "panel-heading"
          }, function() {
            return h3({
              "class": "panel-title"
            }, function() {
              i(".fa.fa-" + this.plugin.icon, {
                style: "margin-right: 10px"
              }, function() {});
              return text(this.plugin.name);
            });
          });
          return iframe({
            "class": "panel-body text-center",
            style: "width:100%; height:100%; border: none;",
            src: this.plugin.uri
          }, function() {});
        });
      }));
    });
  };

  refresh = function() {
    var here, re, route, routes;
    $("body").empty();
    $("body").append(template({}, function() {
      div({
        "class": "navbar navbar-default navbar-static-top",
        role: "navigation"
      }, function() {
        return div({
          "class": "container"
        }, function() {
          div({
            "class": "navbar-header"
          }, function() {
            button({
              type: "button",
              "class": "navbar-toggle collapsed",
              "data-toggle": "collapse",
              "data-target": ".navbar-collapse"
            }, function() {
              span({
                "class": "sr-only"
              }, function() {
                return "Toggle navigation";
              });
              span({
                "class": "icon-bar"
              }, function() {});
              span({
                "class": "icon-bar"
              }, function() {});
              return span({
                "class": "icon-bar"
              }, function() {});
            });
            a({
              href: "#"
            }, function() {
              return img({
                "class": "navbar-left",
                src: "/logo.png",
                height: "50"
              });
            });
            return a({
              "class": "navbar-brand",
              href: "#"
            }, function() {
              return text("&nbsp;PredictiveDB");
            });
          });
          return div({
            "class": "navbar-collapse collapse"
          }, function() {
            return ul({
              "class": "nav navbar-nav navbar-right"
            }, function() {
              return li({
                "class": "dropdown"
              }, function() {
                a({
                  href: "#",
                  "class": "dropdown-toggle",
                  "data-toggle": "dropdown"
                }, function() {
                  return span({
                    "class": "glyphicon glyphicon-cog"
                  }, function() {});
                });
                return ul({
                  "class": "dropdown-menu",
                  role: "menu"
                }, function() {
                  return li(function() {
                    return a({
                      href: "#",
                      id: "reset_local_storage"
                    }, function() {
                      return "Reset Local Storage";
                    });
                  });
                });
              });
            });
          });
        });
      });
      div({
        "class": "container",
        id: "contents"
      }, function() {});
      return div(".footer", function() {
        return div(".container", function() {
          p(".pull-right.text-muted", function() {
            a({
              href: ""
            }, "Terms of Use");
            text(" – ");
            return a({
              href: ""
            }, "Privacy Policy");
          });
          return p(".text-muted", "© 2014 Datacratic Inc.");
        });
      });
    }));
    $("#reset_local_storage").bind("click", function() {
      return backend.reset(function() {
        return jumpto("#/");
      });
    });
    here = window.location.hash;
    routes = {
      "#/plugins/([0-9]+)": _plugin,
      "#/providers": _providers
    };
    for (re in routes) {
      route = routes[re];
      if (!(RegExp(re).test(here))) {
        continue;
      }
      route(here.match(re));
      return false;
    }
    _();
    return false;
  };

  jumpto = function(hashUrl) {
    history.pushState({}, "", hashUrl);
    return refresh();
  };

  $(function() {
    window.onpopstate = refresh;
    return refresh();
  });

}).call(this);
